import javax.swing.*;
import java.awt.*;
import java.math.BigDecimal;

public class MainFrame extends JFrame {
    private JPanel mainPanel;
    private JLabel monthlyBudgetLabel;
    private JButton setBudgetButton;
    private JLabel monthlyExpenses;
    private JLabel dailyPurchase;
    private JButton monthlyExpenseButton;
    private JButton addPurchaseButton;
    private JLabel currentBalanceLabel;
    private JButton newMonthButton;
    private JLabel displayMonthlyBudget;
    private JLabel displayCurrentBalance;
    private JList<String> purchaseList;
    private JList<String> expenseList;

    public MainFrame() {
        setContentPane(mainPanel);
        setTitle("Budget Manager");
        setSize(750, 500);
        displayMonthlyBudget.setText("$" + Budget.getInstance().getMonthlyBudget());      // sets text to the value of the monthly budget
        displayCurrentBalance.setText("$" + Budget.getInstance().getCurrentBalance());    // sets text to the value of the current balance
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);

        loadExpenseList();      // calls method that populates JList with expense list values
        loadPurchaseList();     // calls method that populates JList with purchase list values

        setBudgetButton.addActionListener(e -> {
            if (e.getSource() == setBudgetButton) {
                // Brings up window to enter a monthly budget
                String monthlyBudget = JOptionPane.showInputDialog("What is your Monthly Budget?");
                try {
                    // Calls Budget class to set the monthly budget value
                    Budget.getInstance().setMonthlyBudget(new BigDecimal(monthlyBudget));
                    displayMonthlyBudget.setText("$" + Budget.getInstance().getMonthlyBudget());
                    displayCurrentBalance.setText("$" + Budget.getInstance().getCurrentBalance());
                } catch (Exception ex) {
                    String s = ex.toString();
                    System.out.println(s);
                }
            }
        });
        // creates expenseFrame and disables button
        monthlyExpenseButton.addActionListener(e -> {
            if (e.getSource() == monthlyExpenseButton) {
                // Creates expense frame
                new ExpenseFrame(monthlyExpenseButton, expenseList, displayCurrentBalance);
                // Disables monthlyExpenseButton
                monthlyExpenseButton.setEnabled(false);
            }
        });
        // creates purchaseFrame and disables button
        addPurchaseButton.addActionListener(e -> {
            if (e.getSource() == addPurchaseButton) {
                // Creates purchase frame
                new PurchaseFrame(addPurchaseButton, purchaseList, displayCurrentBalance);
                // Disables addPurchaseButton
                addPurchaseButton.setEnabled(false);
            }
        });
        // Starts new month. Empties purchase list
        newMonthButton.addActionListener(e -> {
            if (e.getSource() == newMonthButton) {
                try {
                    Budget.getInstance().newMonth();    // Calls newMonth method from Budget Class
                    loadPurchaseList();                 // Loads JList with newly emptied list
                    displayCurrentBalance.setText("$" + Budget.getInstance().getCurrentBalance());
                } catch (Exception ex) {
                    String s = ex.toString();
                    System.out.println(s);
                }
            }
        });
    }

    // populates expense JList with expense list elements
    public void loadExpenseList() {
        // Creates new list model
        DefaultListModel<String> listModel = new DefaultListModel<>();
        // populates list model with elements from expense list
        for (Entry ent : Budget.getInstance().getExpenseList()) {
            listModel.addElement(ent.getName() + " $" + ent.getValue());
        }
        expenseList.setModel(listModel);
    }

    // populates purchase JList with purchase list elements
    public void loadPurchaseList() {
        // Creates new list model
        DefaultListModel<String> listModel = new DefaultListModel<>();
        // populates list model with elements from purchase list
        for (Entry ent : Budget.getInstance().getPurchaseList()) {
            listModel.addElement(ent.getName() + " $" + ent.getValue());
        }
        purchaseList.setModel(listModel);
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(8, 5, new Insets(0, 0, 0, 0), -1, -1));
        monthlyBudgetLabel = new JLabel();
        monthlyBudgetLabel.setText("Monthly Budget:");
        mainPanel.add(monthlyBudgetLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        setBudgetButton = new JButton();
        setBudgetButton.setText("Set New Budget");
        mainPanel.add(setBudgetButton, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        monthlyExpenses = new JLabel();
        monthlyExpenses.setText("Monthly Bills/Expenses");
        mainPanel.add(monthlyExpenses, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dailyPurchase = new JLabel();
        dailyPurchase.setText("Daily Purchases");
        mainPanel.add(dailyPurchase, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        monthlyExpenseButton = new JButton();
        monthlyExpenseButton.setText("Add/Remove Monthly Expense");
        mainPanel.add(monthlyExpenseButton, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addPurchaseButton = new JButton();
        addPurchaseButton.setText("Add/Remove Purchase");
        mainPanel.add(addPurchaseButton, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        currentBalanceLabel = new JLabel();
        currentBalanceLabel.setText("Current Balance:");
        mainPanel.add(currentBalanceLabel, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        displayMonthlyBudget = new JLabel();
        displayMonthlyBudget.setText("monthlyBudget displayed here");
        mainPanel.add(displayMonthlyBudget, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(184, 16), null, 0, false));
        displayCurrentBalance = new JLabel();
        displayCurrentBalance.setText("currentBalance displayed here");
        mainPanel.add(displayCurrentBalance, new com.intellij.uiDesigner.core.GridConstraints(4, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(184, 16), null, 0, false));
        purchaseList = new JList();
        mainPanel.add(purchaseList, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        expenseList = new JList();
        mainPanel.add(expenseList, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        newMonthButton = new JButton();
        newMonthButton.setText("Start New Month");
        mainPanel.add(newMonthButton, new com.intellij.uiDesigner.core.GridConstraints(6, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(2, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer3, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer4 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer4, new com.intellij.uiDesigner.core.GridConstraints(7, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer5 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer5, new com.intellij.uiDesigner.core.GridConstraints(5, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }


}

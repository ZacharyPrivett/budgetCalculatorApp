import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.math.BigDecimal;

public class PurchaseFrame extends JFrame {
    private JPanel addPanel;
    private JButton enterPurchaseButton;
    private JTextField itemField;
    private JTextField priceField;
    private JList<String> purchaseList;
    private JButton removeButton;
    private JButton returnButton;
    private JPanel removePanel;
    private JLabel enterTitle;
    private JLabel removeTitle;
    private JLabel itemLabel;
    private JLabel priceLabel;
    private String selectedItem = "";
    private final JList<String> mainPurchaseList;
    private final JLabel balanceLabel;

    public PurchaseFrame(JButton orig, JList<String> mainPurchaseList, JLabel balanceLabel) {
        this.mainPurchaseList = mainPurchaseList;   // purchase list from MainFrame
        this.balanceLabel = balanceLabel;           // current balance label from MainFrame
        setContentPane(addPanel);
        setTitle("Budget Manager");
        setSize(750, 500);
        setVisible(true);
        loadList();     // loads purchase list to JList

        enterPurchaseButton.addActionListener(e -> {
            if (e.getSource() == enterPurchaseButton) {
                // Grabs values from text fields
                String itemName = itemField.getText();
                String priceValue = priceField.getText();
                try {
                    // Creates new Entry and adds it to purchase list
                    Budget.getInstance().addPurchase(new Entry(itemName, new BigDecimal(priceValue)));
                    // Sets texts fields back to empty text fields
                    itemField.setText("");
                    priceField.setText("");
                    // Populates the JList with newly added or removed values
                    loadList();
                } catch (IOException ex) {
                    String s = ex.toString();
                    System.out.println(s);
                }
            }
        });
        // keeps track of selected item in JList
        purchaseList.addListSelectionListener(e -> {
            selectedItem = purchaseList.getSelectedValue();
        });
        // preforms function when window is closed
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);     // tracks window closing
                orig.setEnabled(true);      // enables purchase button in MainFrame when window closes
                updateBalance();            // updates current balance in MainFrame
            }
        });
        // Removes selected item from list
        removeButton.addActionListener(e -> {
            if (e.getSource() == removeButton) {
                try {
                    Budget.getInstance().removePurchase(selectedItem);
                    loadList(); // reloads the JList after item has been removed
                } catch (IOException ex) {
                    String s = ex.toString();
                    System.out.println(s);
                }
            }
        });
        // Returns to MainFrame
        returnButton.addActionListener(e -> {
            if (e.getSource() == returnButton) {
                dispose();              // closes window
                orig.setEnabled(true);  // enables purchase button in MainFrame when window closes
                updateBalance();        // updates current balance in MainFrame
            }
        });
    }

    // Loads elements to JList
    public void loadList() {
        DefaultListModel<String> listModel = new DefaultListModel<>();
        // populates JList with purchase list elements
        for (Entry ent : Budget.getInstance().getPurchaseList()) {
            listModel.addElement(ent.getName() + " $" + ent.getValue());
        }
        purchaseList.setModel(listModel);       // sets JList on this window with purchase list
        mainPurchaseList.setModel(listModel);   // sets purchase JList in MainFrame
    }

    // Used to set the balance value in MainFrame after updates to purchases have been made
    public void updateBalance() {
        balanceLabel.setText("$" + Budget.getInstance().getCurrentBalance());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        addPanel = new JPanel();
        addPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 4, new Insets(0, 0, 0, 0), -1, -1));
        enterTitle = new JLabel();
        enterTitle.setText("Enter the Item name and price below");
        addPanel.add(enterTitle, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enterPurchaseButton = new JButton();
        enterPurchaseButton.setText("Enter Purchase");
        addPanel.add(enterPurchaseButton, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        itemLabel = new JLabel();
        itemLabel.setText("Item Name");
        addPanel.add(itemLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(9, 16), null, 0, false));
        itemField = new JTextField();
        addPanel.add(itemField, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        priceLabel = new JLabel();
        priceLabel.setText("Price");
        addPanel.add(priceLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(9, 16), null, 0, false));
        priceField = new JTextField();
        addPanel.add(priceField, new com.intellij.uiDesigner.core.GridConstraints(2, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        removePanel = new JPanel();
        removePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        addPanel.add(removePanel, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        removeTitle = new JLabel();
        removeTitle.setText("To remove purchased item select item below and press the remove button");
        removePanel.add(removeTitle, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        purchaseList = new JList();
        removePanel.add(purchaseList, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        removeButton = new JButton();
        removeButton.setText("Remove");
        removePanel.add(removeButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        returnButton = new JButton();
        returnButton.setText("Return");
        removePanel.add(returnButton, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        addPanel.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(4, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, 1, 1, null, new Dimension(100, 11), null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        addPanel.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, 1, 1, null, new Dimension(100, 11), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return addPanel;
    }

}
